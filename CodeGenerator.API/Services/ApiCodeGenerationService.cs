using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using CodeGenerator.API.Models;
using Microsoft.Extensions.Logging;

namespace CodeGenerator.API.Services;

public sealed record ApiGenerationOptions(string ControllersDirectory, string ModelsDirectory, string ConfigurationsDirectory);

public interface IApiCodeGenerationService
{
    IEnumerable<GeneratedFile> GenerateApiArtifacts(DatabaseTable table, ApiGenerationOptions options);
}

public class ApiCodeGenerationService : IApiCodeGenerationService
{
    private readonly ILogger<ApiCodeGenerationService> _logger;

    private const string ControllersNamespace = "CodeGenerator.API.Controllers.Generated";
    private const string ModelsNamespace = "CodeGenerator.API.Models.Generated";
    private const string ConfigurationsNamespace = "CodeGenerator.API.Data.Generated";
    private const string Indent1 = "    ";
    private const string Indent2 = "        ";
    private const string Indent3 = "            ";
    private const string StringTypeName = "string";
    private const string ByteArrayTypeName = "byte[]";

    public ApiCodeGenerationService(ILogger<ApiCodeGenerationService> logger)
    {
        _logger = logger;
    }

    public IEnumerable<GeneratedFile> GenerateApiArtifacts(DatabaseTable table, ApiGenerationOptions options)
    {
        if (table.Columns == null || table.Columns.Count == 0)
        {
            throw new InvalidOperationException($"Cannot generate API artifacts for table '{table.Schema}.{table.TableName}' because it has no columns.");
        }

        var entityName = ToPascalCase(table.TableName);
        var controllerName = $"{entityName}Controller";

        var files = new List<GeneratedFile>
        {
            new()
            {
                FileName = Path.Combine("Models", "Generated", $"{entityName}.cs").Replace('\\', '/'),
                FilePath = Path.Combine(options.ModelsDirectory, $"{entityName}.cs"),
                Content = BuildEntityContent(table, entityName),
                FileType = "api-entity"
            },
            new()
            {
                FileName = Path.Combine("Data", "Generated", $"{entityName}Configuration.cs").Replace('\\', '/'),
                FilePath = Path.Combine(options.ConfigurationsDirectory, $"{entityName}Configuration.cs"),
                Content = BuildEntityConfigurationContent(table, entityName),
                FileType = "ef-configuration"
            },
            new()
            {
                FileName = Path.Combine("Controllers", "Generated", $"{controllerName}.cs").Replace('\\', '/'),
                FilePath = Path.Combine(options.ControllersDirectory, $"{controllerName}.cs"),
                Content = BuildControllerContent(table, entityName, controllerName),
                FileType = "api-controller"
            }
        };

        _logger.LogInformation("Prepared API controller, entity, and configuration for {Schema}.{TableName}", table.Schema, table.TableName);

        return files;
    }

    private static string BuildEntityContent(DatabaseTable table, string entityName)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine($"//     This file was generated by the Code Generator on {DateTime.UtcNow:O}.");
        sb.AppendLine($"//     Table: {table.Schema}.{table.TableName}");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine("using System.ComponentModel.DataAnnotations;");
        sb.AppendLine("using System.ComponentModel.DataAnnotations.Schema;");
        sb.AppendLine();
        sb.AppendLine($"namespace {ModelsNamespace};");
        sb.AppendLine();
        sb.AppendLine($"[Table(\"{table.TableName}\", Schema = \"{table.Schema}\")]\npublic class {entityName}");
        sb.AppendLine("{");

        foreach (var column in table.Columns)
        {
            var propertyName = ToPascalCase(column.ColumnName);
            var propertyType = ResolvePropertyType(column);
            var defaultValue = GetDefaultValue(propertyType);

            foreach (var attribute in BuildEntityAttributes(column))
            {
                sb.AppendLine(Indent1 + attribute);
            }

            var defaultClause = string.IsNullOrEmpty(defaultValue) ? string.Empty : $" = {defaultValue};";
            sb.AppendLine(Indent1 + $"public {propertyType} {propertyName} {{ get; set; }}{defaultClause}");
            sb.AppendLine();
        }

        sb.AppendLine("}");

        return sb.ToString();
    }

    private static string BuildEntityConfigurationContent(DatabaseTable table, string entityName)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine($"//     This file was generated by the Code Generator on {DateTime.UtcNow:O}.");
        sb.AppendLine($"//     Table: {table.Schema}.{table.TableName}");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine("using CodeGenerator.API.Models.Generated;");
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using Microsoft.EntityFrameworkCore.Metadata.Builders;");
        sb.AppendLine();
        sb.AppendLine($"namespace {ConfigurationsNamespace};");
        sb.AppendLine();
        sb.AppendLine($"public class {entityName}Configuration : IEntityTypeConfiguration<{entityName}>");
        sb.AppendLine("{");
        sb.AppendLine(Indent1 + $"public void Configure(EntityTypeBuilder<{entityName}> entity)");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + $"entity.ToTable(\"{table.TableName}\", \"{table.Schema}\");");

    var primaryKey = table.Columns.FirstOrDefault(c => c.IsPrimaryKey) ?? table.Columns[0];
        if (primaryKey != null)
        {
            var primaryKeyPropertyName = ToPascalCase(primaryKey.ColumnName);
            sb.AppendLine(Indent2 + $"entity.HasKey(e => e.{primaryKeyPropertyName});");
            sb.AppendLine();
        }

        foreach (var column in table.Columns)
        {
            sb.Append(BuildPropertyConfiguration(column));
        }

        sb.AppendLine(Indent1 + "}");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private static string BuildControllerContent(DatabaseTable table, string entityName, string controllerName)
    {
    var primaryColumn = table.Columns.FirstOrDefault(c => c.IsPrimaryKey) ?? table.Columns[0];
        var primaryKeyType = NormalizeClrType(primaryColumn.CSharpType);
        var primaryKeyPropertyName = ToPascalCase(primaryColumn.ColumnName);
        var primaryKeyParameterName = ToCamelCase(primaryColumn.ColumnName);

        var keyComparer = $"EqualityComparer<{primaryKeyType}>";

        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine($"//     This file was generated by the Code Generator on {DateTime.UtcNow:O}.");
        sb.AppendLine($"//     Table: {table.Schema}.{table.TableName}");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using Microsoft.AspNetCore.Http;");
        sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
        sb.AppendLine("using Microsoft.EntityFrameworkCore;");
        sb.AppendLine("using Microsoft.Extensions.Logging;");
        sb.AppendLine("using CodeGenerator.API.Data;");
        sb.AppendLine("using CodeGenerator.API.Models.Generated;");
        sb.AppendLine();
        sb.AppendLine($"namespace {ControllersNamespace};");
        sb.AppendLine();
        sb.AppendLine("[ApiController]");
        sb.AppendLine("[Route(\"api/[controller]\")]");
        sb.AppendLine($"public class {controllerName} : ControllerBase");
        sb.AppendLine("{");
        sb.AppendLine(Indent1 + "private readonly CodeGeneratorDbContext _context;");
        sb.AppendLine(Indent1 + $"private readonly ILogger<{controllerName}> _logger;");
        sb.AppendLine();
        sb.AppendLine(Indent1 + $"public {controllerName}(CodeGeneratorDbContext context, ILogger<{controllerName}> logger)");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + "_context = context;");
        sb.AppendLine(Indent2 + "_logger = logger;");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine();

        sb.AppendLine(Indent1 + "[HttpGet]");
        sb.AppendLine(Indent1 + $"[ProducesResponseType(typeof(IEnumerable<{entityName}>), StatusCodes.Status200OK)]");
        sb.AppendLine(Indent1 + $"public async Task<ActionResult<IEnumerable<{entityName}>>> GetAll()");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + $"var entities = await _context.Set<{entityName}>().AsNoTracking().ToListAsync();");
        sb.AppendLine(Indent2 + "return Ok(entities);");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine();

        sb.AppendLine(Indent1 + $"[HttpGet(\"{{{primaryKeyParameterName}}}\")]");
        sb.AppendLine(Indent1 + $"[ProducesResponseType(typeof({entityName}), StatusCodes.Status200OK)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        sb.AppendLine(Indent1 + $"public async Task<ActionResult<{entityName}>> GetById({primaryKeyType} {primaryKeyParameterName})");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + $"var entity = await _context.Set<{entityName}>().FindAsync({primaryKeyParameterName});");
        sb.AppendLine(Indent2 + "if (entity == null)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return NotFound();");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + "return Ok(entity);");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine();

        sb.AppendLine(Indent1 + "[HttpPost]");
        sb.AppendLine(Indent1 + $"[ProducesResponseType(typeof({entityName}), StatusCodes.Status201Created)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status400BadRequest)]");
        sb.AppendLine(Indent1 + $"public async Task<ActionResult<{entityName}>> Create([FromBody] {entityName} request)");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + "if (request == null)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return BadRequest(\"Request body cannot be null.\");");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + $"await _context.Set<{entityName}>().AddAsync(request);");
        sb.AppendLine(Indent2 + "await _context.SaveChangesAsync();");
        sb.AppendLine();
        sb.AppendLine(Indent2 + $"return CreatedAtAction(nameof(GetById), new {{ {primaryKeyParameterName} = request.{primaryKeyPropertyName} }}, request);");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine();

        sb.AppendLine(Indent1 + $"[HttpPut(\"{{{primaryKeyParameterName}}}\")]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status204NoContent)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status400BadRequest)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status409Conflict)]");
        sb.AppendLine(Indent1 + $"public async Task<IActionResult> Update({primaryKeyType} {primaryKeyParameterName}, [FromBody] {entityName} request)");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + "if (request == null)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return BadRequest(\"Request body cannot be null.\");");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + $"if (!{keyComparer}.Default.Equals({primaryKeyParameterName}, request.{primaryKeyPropertyName}))");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return BadRequest(\"Route value does not match the entity identifier.\");");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + $"var set = _context.Set<{entityName}>();");
        sb.AppendLine(Indent2 + $"var exists = await set.AnyAsync(entity => {BuildLambdaCondition(primaryKeyParameterName, primaryKeyPropertyName)});");
        sb.AppendLine(Indent2 + "if (!exists)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return NotFound();");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + "try");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "_context.Entry(request).State = EntityState.Modified;");
        sb.AppendLine(Indent3 + "await _context.SaveChangesAsync();");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine(Indent2 + "catch (DbUpdateConcurrencyException ex)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "_logger.LogError(ex, \"Concurrency conflict while updating {Entity}\", typeof({entityName}).Name);");
        sb.AppendLine(Indent3 + "return StatusCode(StatusCodes.Status409Conflict, \"A concurrency conflict occurred while updating the resource.\");");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + "return NoContent();");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine();

        sb.AppendLine(Indent1 + $"[HttpDelete(\"{{{primaryKeyParameterName}}}\")]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status204NoContent)]");
        sb.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        sb.AppendLine(Indent1 + $"public async Task<IActionResult> Delete({primaryKeyType} {primaryKeyParameterName})");
        sb.AppendLine(Indent1 + "{");
        sb.AppendLine(Indent2 + $"var set = _context.Set<{entityName}>();");
        sb.AppendLine(Indent2 + $"var entity = await set.FindAsync({primaryKeyParameterName});");
        sb.AppendLine(Indent2 + "if (entity == null)");
        sb.AppendLine(Indent2 + "{");
        sb.AppendLine(Indent3 + "return NotFound();");
        sb.AppendLine(Indent2 + "}");
        sb.AppendLine();
        sb.AppendLine(Indent2 + "set.Remove(entity);");
        sb.AppendLine(Indent2 + "await _context.SaveChangesAsync();");
        sb.AppendLine();
        sb.AppendLine(Indent2 + "return NoContent();");
        sb.AppendLine(Indent1 + "}");
        sb.AppendLine("}");

        return sb.ToString();
    }

    private static string BuildLambdaCondition(string parameterName, string propertyName) => $"entity.{propertyName} == {parameterName}";

    private static IEnumerable<string> BuildEntityAttributes(DatabaseColumn column)
    {
        var attributes = new List<string>
        {
            $"[Column(\"{column.ColumnName}\")]"
        };

        if (column.IsPrimaryKey)
        {
            attributes.Add("[Key]");
        }

        if (column.IsIdentity)
        {
            attributes.Add("[DatabaseGenerated(DatabaseGeneratedOption.Identity)]");
        }

        if (!column.IsNullable && IsReferenceColumn(column))
        {
            attributes.Add("[Required]");
        }

        if (column.MaxLength.HasValue && column.MaxLength.Value > 0)
        {
            attributes.Add($"[MaxLength({column.MaxLength.Value})]");
        }

        return attributes;
    }

    private static string BuildPropertyConfiguration(DatabaseColumn column)
    {
        var propertyName = ToPascalCase(column.ColumnName);
        var sb = new StringBuilder();
        sb.AppendLine(Indent2 + $"entity.Property(e => e.{propertyName})");

        var chains = new List<string>
        {
            $".HasColumnName(\"{column.ColumnName}\")"
        };

        if (column.MaxLength.HasValue && column.MaxLength.Value > 0)
        {
            chains.Add($".HasMaxLength({column.MaxLength.Value})");
        }

        if (!column.IsNullable && IsReferenceColumn(column))
        {
            chains.Add(".IsRequired()");
        }

        if (column.IsIdentity)
        {
            chains.Add(".ValueGeneratedOnAdd()");
        }

        for (int i = 0; i < chains.Count; i++)
        {
            var suffix = i == chains.Count - 1 ? ";" : string.Empty;
            sb.AppendLine(Indent3 + chains[i] + suffix);
        }

        if (chains.Count == 0)
        {
            sb.AppendLine(Indent3 + ";");
        }

        sb.AppendLine();
        return sb.ToString();
    }

    private static string ResolvePropertyType(DatabaseColumn column)
    {
        if (column.CSharpType.Equals(StringTypeName, StringComparison.OrdinalIgnoreCase))
        {
            return column.IsNullable ? "string?" : StringTypeName;
        }

        if (column.CSharpType.Equals(ByteArrayTypeName, StringComparison.OrdinalIgnoreCase))
        {
            return column.IsNullable ? "byte[]?" : ByteArrayTypeName;
        }

        return column.CSharpType;
    }

    private static string GetDefaultValue(string propertyType)
    {
        return propertyType switch
        {
            StringTypeName => "string.Empty",
            ByteArrayTypeName => "Array.Empty<byte>()",
            _ when propertyType.EndsWith('?') => string.Empty,
            _ => string.Empty
        };
    }

    private static bool IsReferenceColumn(DatabaseColumn column)
    {
        return column.CSharpType.Equals(StringTypeName, StringComparison.OrdinalIgnoreCase) || column.CSharpType.EndsWith("[]", StringComparison.Ordinal); 
    }

    private static string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return "Entity";
        }

        if (input.Contains('.'))
        {
            input = input[(input.LastIndexOf('.') + 1)..];
        }

        var parts = input.Split(new[] { '_', ' ', '-' }, StringSplitOptions.RemoveEmptyEntries);
        return string.Concat(parts.Select(part => char.ToUpperInvariant(part[0]) + part[1..].ToLowerInvariant()));
    }

    private static string ToCamelCase(string input)
    {
        var pascal = ToPascalCase(input);
        return pascal.Length switch
        {
            0 => string.Empty,
            1 => pascal.ToLowerInvariant(),
            _ => char.ToLowerInvariant(pascal[0]) + pascal[1..]
        };
    }

    private static string NormalizeClrType(string clrType)
    {
        if (string.IsNullOrWhiteSpace(clrType))
        {
            return "int";
        }

        return clrType.EndsWith('?') ? clrType.TrimEnd('?') : clrType;
    }
}
