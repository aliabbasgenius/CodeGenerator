using System.Text;
using CodeGenerator.API.Models;
using Microsoft.Extensions.Logging;

namespace CodeGenerator.API.Services;

public interface IApiCodeGenerationService
{
    GeneratedFile GenerateController(DatabaseTable table, string controllersDirectory);
}

public class ApiCodeGenerationService : IApiCodeGenerationService
{
    private readonly ILogger<ApiCodeGenerationService> _logger;
    private const string Indent1 = "    ";
    private const string Indent2 = "        ";
    private const string TodoComment = Indent2 + "// TODO: Replace the sample implementation with your data access code";

    public ApiCodeGenerationService(ILogger<ApiCodeGenerationService> logger)
    {
        _logger = logger;
    }

    public GeneratedFile GenerateController(DatabaseTable table, string controllersDirectory)
    {
        if (table.Columns == null || table.Columns.Count == 0)
        {
            throw new InvalidOperationException($"Cannot generate controller for table '{table.Schema}.{table.TableName}' because it has no columns.");
        }

        var className = ToPascalCase(table.TableName);
        var controllerName = $"{className}Controller";
        var dtoName = $"{className}Dto";
    var primaryKey = table.Columns.FirstOrDefault(c => c.IsPrimaryKey) ?? table.Columns[0];
        var primaryKeyType = NormalizeClrType(primaryKey?.CSharpType ?? "int");
        var primaryKeyPropertyName = primaryKey != null ? ToPascalCase(primaryKey.ColumnName) : "Id";
        var primaryKeyParameterName = primaryKey != null ? ToCamelCase(primaryKey.ColumnName) : "id";

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine($"//     This file was generated by the Code Generator on {DateTime.UtcNow:O}.");
        builder.AppendLine($"//     Table: {table.Schema}.{table.TableName}");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine();
        builder.AppendLine("using System;");
        builder.AppendLine("using System.Collections.Generic;");
        builder.AppendLine("using Microsoft.AspNetCore.Http;");
        builder.AppendLine("using Microsoft.AspNetCore.Mvc;");
        builder.AppendLine("using Microsoft.Extensions.Logging;");
        builder.AppendLine();
        builder.AppendLine("namespace CodeGenerator.API.Controllers.Generated;");
        builder.AppendLine();
        builder.AppendLine("[ApiController]");
        builder.AppendLine("[Route(\"api/[controller]\")]");
        builder.AppendLine($"public class {controllerName} : ControllerBase");
        builder.AppendLine("{");
        builder.AppendLine(Indent1 + $"private readonly ILogger<{controllerName}> _logger;");
        builder.AppendLine();
        builder.AppendLine(Indent1 + $"public {controllerName}(ILogger<{controllerName}> logger)");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(Indent2 + "_logger = logger;");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent1 + "[HttpGet]");
        builder.AppendLine(Indent1 + $"[ProducesResponseType(typeof(IEnumerable<{dtoName}>), StatusCodes.Status200OK)]");
        builder.AppendLine(Indent1 + $"public ActionResult<IEnumerable<{dtoName}>> GetAll()");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(TodoComment);
        builder.AppendLine(Indent2 + $"return Ok(Array.Empty<{dtoName}>());");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent1 + $"[HttpGet(\"{{{primaryKeyParameterName}}}\")]");
        builder.AppendLine(Indent1 + $"[ProducesResponseType(typeof({dtoName}), StatusCodes.Status200OK)]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        builder.AppendLine(Indent1 + $"public ActionResult<{dtoName}> GetById({primaryKeyType} {primaryKeyParameterName})");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(TodoComment);
        builder.AppendLine(Indent2 + "return NotFound();");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent1 + "[HttpPost]");
        builder.AppendLine(Indent1 + $"[ProducesResponseType(typeof({dtoName}), StatusCodes.Status201Created)]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status400BadRequest)]");
        builder.AppendLine(Indent1 + $"public ActionResult<{dtoName}> Create([FromBody] {dtoName} request)");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(Indent2 + "if (request == null)");
        builder.AppendLine(Indent2 + "{");
        builder.AppendLine(Indent2 + Indent1 + "return BadRequest(\"Request body cannot be null.\");");
        builder.AppendLine(Indent2 + "}");
        builder.AppendLine();
        builder.AppendLine(TodoComment);
        builder.AppendLine(Indent2 + "_logger.LogInformation(\"Create endpoint called for {Controller}\", nameof(Create));");
        builder.AppendLine();
        builder.AppendLine(Indent2 + $"return CreatedAtAction(nameof(GetById), new {{ {primaryKeyParameterName} = request.{primaryKeyPropertyName} }}, request);");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent1 + $"[HttpPut(\"{{{primaryKeyParameterName}}}\")]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status204NoContent)]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status400BadRequest)]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        builder.AppendLine(Indent1 + $"public IActionResult Update({primaryKeyType} {primaryKeyParameterName}, [FromBody] {dtoName} request)");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(Indent2 + "if (request == null)");
        builder.AppendLine(Indent2 + "{");
        builder.AppendLine(Indent2 + Indent1 + "return BadRequest(\"Request body cannot be null.\");");
        builder.AppendLine(Indent2 + "}");
        builder.AppendLine();
        builder.AppendLine(TodoComment);
        builder.AppendLine(Indent2 + "var resourceExists = false;");
        builder.AppendLine(Indent2 + "if (!resourceExists)");
        builder.AppendLine(Indent2 + "{");
        builder.AppendLine(Indent2 + Indent1 + "return NotFound();");
        builder.AppendLine(Indent2 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent2 + "return NoContent();");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent1 + $"[HttpDelete(\"{{{primaryKeyParameterName}}}\")]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status204NoContent)]");
        builder.AppendLine(Indent1 + "[ProducesResponseType(StatusCodes.Status404NotFound)]");
        builder.AppendLine(Indent1 + $"public IActionResult Delete({primaryKeyType} {primaryKeyParameterName})");
        builder.AppendLine(Indent1 + "{");
        builder.AppendLine(TodoComment);
        builder.AppendLine(Indent2 + "var resourceExists = false;");
        builder.AppendLine(Indent2 + "if (!resourceExists)");
        builder.AppendLine(Indent2 + "{");
        builder.AppendLine(Indent2 + Indent1 + "return NotFound();");
        builder.AppendLine(Indent2 + "}");
        builder.AppendLine();
        builder.AppendLine(Indent2 + "return NoContent();");
        builder.AppendLine(Indent1 + "}");
        builder.AppendLine("}");
        builder.AppendLine();
        builder.AppendLine($"public class {dtoName}");
        builder.AppendLine("{");

        foreach (var column in table.Columns)
        {
            var propertyName = ToPascalCase(column.ColumnName);
            builder.AppendLine(Indent1 + $"public {column.CSharpType} {propertyName} {{ get; set; }}");
        }

        builder.AppendLine("}");

        var filePath = Path.Combine(controllersDirectory, $"{controllerName}.cs");
        var fileName = Path.Combine("Controllers", "Generated", $"{controllerName}.cs").Replace('\\', '/');

        _logger.LogInformation("Prepared API controller template for {Schema}.{TableName}", table.Schema, table.TableName);

        return new GeneratedFile
        {
            FileName = fileName,
            FilePath = filePath,
            Content = builder.ToString(),
            FileType = "api-controller"
        };
    }

    private static string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            return "Entity";
        }

        if (input.Contains('.'))
        {
            input = input.Substring(input.LastIndexOf('.') + 1);
        }

        var parts = input.Split(new[] { '_', ' ', '-' }, StringSplitOptions.RemoveEmptyEntries);
        return string.Concat(parts.Select(part => char.ToUpperInvariant(part[0]) + part.Substring(1).ToLowerInvariant()));
    }

    private static string ToCamelCase(string input)
    {
        var pascal = ToPascalCase(input);
        return pascal.Length switch
        {
            0 => string.Empty,
            1 => pascal.ToLowerInvariant(),
            _ => char.ToLowerInvariant(pascal[0]) + pascal[1..]
        };
    }

    private static string NormalizeClrType(string clrType)
    {
        if (string.IsNullOrWhiteSpace(clrType))
        {
            return "int";
        }

        return clrType.EndsWith('?') ? clrType.TrimEnd('?') : clrType;
    }
}
